knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
sourceCpp("NaiveAlgorithme.cpp")
source("NaiveAlgorithme.R")
cost_matrix <- list(
c(1, 1, 5),
c(5, 9, 7),
c(8, 1, 9)
)
naive_adj_matrix <- NaiveAlgorithme(cost_matrix)
naive_adj_matrix
# Exemple d'utilisation :
# Créer une matrice de coût (exemple)
costMatrix <- matrix(c(1, 1, 5, 5, 9, 7, 8, 1, 9), nrow = 3)
# Appeler l'algorithme naïf
NaiveAlgorithme_R(costMatrix)
library(Rcpp)
sourceCpp("NaiveAlgorithme.cpp")
source("NaiveAlgorithme.R")
# Exemple d'utilisation :
# Créer une matrice de coût (exemple)
costMatrix <- matrix(c(1, 1, 5, 5, 9, 7, 8, 1, 9), nrow = 3)
# Appeler l'algorithme naïf
NaiveAlgorithme_R(costMatrix)
library(Rcpp)
sourceCpp("NaiveAlgorithme.cpp")
source("NaiveAlgorithme.R")
# Exemple d'utilisation :
# Créer une matrice de coût (exemple)
costMatrix <- matrix(c(1, 1, 5, 5, 9, 7, 8, 1, 9), nrow = 3)
# Appeler l'algorithme naïf
NaiveAlgorithme_R(costMatrix)
library(Rcpp)
sourceCpp("NaiveAlgorithme.cpp")
source("NaiveAlgorithme.R")
# Exemple d'utilisation :
# Créer une matrice de coût (exemple)
costMatrix <- matrix(c(1, 1, 5, 5, 9, 7, 8, 1, 9), nrow = 3)
# Appeler l'algorithme naïf
NaiveAlgorithme_R(costMatrix)
library(Rcpp)
sourceCpp("NaiveAlgorithme.cpp")
source("NaiveAlgorithme.R")
# Exemple d'utilisation :
# Créer une matrice de coût (exemple)
costMatrix <- matrix(c(1, 1, 5, 5, 9, 7, 8, 1, 9), nrow = 3)
# Appeler l'algorithme naïf
NaiveAlgorithme_R(costMatrix)
library(Rcpp)
sourceCpp("NaiveAlgorithme.cpp")
source("NaiveAlgorithme.R")
# Exemple d'utilisation :
# Créer une matrice de coût (exemple)
costMatrix <- matrix(c(1, 1, 5, 5, 9, 7, 8, 1, 9), nrow = 3)
# Appeler l'algorithme naïf
NaiveAlgorithme_R(costMatrix)
library(Rcpp)
sourceCpp("NaiveAlgorithme.cpp")
source("NaiveAlgorithme.R")
cost_matrix <- list(
c(1, 1, 5),
c(5, 9, 7),
c(8, 1, 9)
)
naive_adj_matrix <- NaiveAlgorithme(cost_matrix)
naive_adj_matrix
# Exemple d'utilisation :
# Créer une matrice de coût (exemple)
costMatrix <- matrix(c(1, 1, 5, 5, 9, 7, 8, 1, 9), nrow = 3)
# Appeler l'algorithme naïf
NaiveAlgorithme_R(costMatrix)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
cost_matrix <- list(
c(9, 1, 5),
c(1, 9, 7),
c(8, 1, 9)
)
hungarian_adj_matrix <- Hungarian(cost_matrix)
hungarian_adj_matrix
cost_matrix <- list(
c(9, 1, 5),
c(1, 9, 7),
c(8, 1, 9)
)
hungarian_adj_matrix <- Hungarian(cost_matrix, verbose = TRUE)
hungarian_adj_matrix
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 5, 1, 9, 7, 8, 1, 9), nrow = 3)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 5, 1, 9, 7, 8, 1, 9), nrow = 3)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 5, 1, 9, 7, 8, 1, 9), nrow = 3)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 5, 1, 9, 7, 8, 1, 9), nrow = 3)
print(matrix_input)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 5, 1, 9, 7, 8, 1, 9), nrow = 3)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 5, 1, 9, 7, 8, 1, 9), nrow = 3)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 5, 1, 9, 7, 8, 1, 9), nrow = 3)
print(matrix_input)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input)
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[[2]])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[2])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[1])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
sourceCpp("Hungarian.cpp")
source("Hungarian.R")
# Définir une matrice d'entrée
matrix_input <- matrix(c(9, 1, 8, 1, 9, 1, 5, 7, 9), nrow = 3)
print(matrix_input[3, ])
# Appliquer l'algorithme Hungarian
result <- Hungarian_R(matrix_input, verbose = TRUE)
